import { useState, useEffect, useTransition } from 'react'
import { useRouter } from 'next/router'
import type { NextPage, InferGetServerSidePropsType } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import classes from '../styles/Home.module.css'
import { fetchCountries, normalizeCountriesData, Country, searchCountrires } from '../utils'

import { AiOutlineSearch as SearchIcon } from 'react-icons/ai'
import CountryCard from '../components/countryCard'

import {
  useAppDispatch,
  useAppSelector,
} from '../store/hooks';
import {
  selectSearch,
  setQuery,
} from '../store/search/searchSlice';
import {
  selectCountries,
  setCountries,
} from '../store/countries/countriesSlice';

const Home = ({ 
  countries,
 }: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  // const [search, setSearch] = useState('');

  const dispatch = useAppDispatch();
  const searchValue = useAppSelector(selectSearch);
  // const countriesData = useAppSelector(selectCountries);

  const [isTexting, startTransition] = useTransition();
  const router = useRouter();
  const search = router.query.search as string;

  // useEffect(()=> {
  //   if (countries.length !== countriesData.length) {
  //     dispatch(setCountries(countries));
  //   }
  // }, [countries]);

  const first40Countries = countries.slice(0, 40);
  const filteredCountries = search ? searchCountrires(search, countries) : first40Countries;

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toLowerCase()
    // setSearch(value);
    dispatch(setQuery(value));
    // startTransition(()=> {
    //   router.push(`/?search=${value.trim().replace(/\s/g, '+')}`);
    // });
    router.push(`/?search=${value.trim().replace(/\s/g, '+')}`, undefined, { shallow: true });
  }

  return (
    <div className={classes.home}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={["container", classes.container].join(" ")}>
        <div className={classes.top}>

          <div className={classes.searchContainer}>
            <SearchIcon className='' />
            <input 
              type="text" 
              className={classes.input} 
              placeholder="Search for a country"
              value={searchValue}
              onChange={handleSearch}
            />
            {isTexting && <span className='font-xs opacity-50'>typing</span>}
          </div>

          {/* <div className={`p-2 ${classes.filterContainer}`}></div> */}

        </div>

        <div className={classes.main}>
          <div className={classes.countries}>
            {filteredCountries.map((country: Country, index) => (
              <CountryCard key={index} country={country} />
            ))}
          </div>
          
        </div>
      </div>
    </div>
  )
}

export const getServerSideProps = async (ctx: any) => {
  const data = await fetchCountries();
  // const search = ctx.query.search as string;

  const normalizeCountries = normalizeCountriesData(data);
  // const countries = search ? searchCountrires(search, normalizeCountries) : normalizeCountries;

  return {
    props: {
      countries: JSON.parse(JSON.stringify(normalizeCountries)) as Country[],
    },
  }
}

export default Home
